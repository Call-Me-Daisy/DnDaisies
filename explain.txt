REG
	KEYWORDS: "Shorthand names and conventions that will be used throughout the helptext for this bot"
	COMMANDS: "Functions called directly by the user\nCan take any number of (space-separated) arguments"
	CONSOLES: "Subcommands called by certain wrapper COMMANDS (ie. arena or guide)"
	STYLES: "Functions that actually create the map image from the arena"
##

COMMANDS
	flags: "Commands which only affect the automated Discord interactions (such as displaying the map or deleting the arena) which occur after an instruction list is parsed"
	tools: ""
	[extensions]: undefined
#
CONSOLES
	arena: "Functions to create an arena specialised for a particular TTG.\nA basic arena contains:\n> Width, a positive integer number of cells\n> Height, a positive integer number of cells\n> Layer_Builders, a list of named layers to stack in the order they appear\nSee COMMANDS.tools.arena for more details"
	newGroup: "Functions to create a new group in the current arena.\nA basic group contains:\n> Name, how it is saved and retrieved\n> Colour, how the tokens are filled on the map\n> Dimensions, an overridable default value passed to new tokens on creation\n> Draw_stage, how late the group is drawn to the map (except -1 which is always last)\n> Styles, the functions that actually draw the tokens to the map\nSee CONSOLES.newGroup.(core & [arena_type]) for more details"
	guide: "Functions to prepare new guide shapes to be drawn to the current arena.\nA CONSOLES.guide.[guide_type] will generally prepare a shape which will be drawn with STYLES.guide.[guide_type], so see that also for further clarification."
##
STYLES
	general: undefined
	cell: "Styles for drawing the repeating unit (generally a filled geometric shape) used in token styles"
	token: "Highly varied and/or complex styles for drawing the token itself"
	name: "Styles for drawing a token's identifier (generally 2-3 characters, based on its given name)"
	guide: "Styles for drawing the shape (generally a geometric outline) created by calls to CONSOLES.guide"
	light: "Styles for drawing light and/or darkness emanating from a token"
##
KEYWORDS
	Interactions: "Instructions for the user when operating the bot"
	CodeObjects: "In-code objects that can be manipulated through commands"
	UserInput: "Objects used in-code but specified in-command by the user (and how to do so)"
##

Interactions
	SquareBrackets: "[some_argument] => [some_argument] is necessary for the command or object to work as intended"
	CurlyBrackets: "{some_argument} => {some_argument} is an optional addition for the command or object (generally comes with a default value)"
	Call: "call '[some_command]' => send '--[some_command]' as a message to this channel"
	See: "see [some_topic] => call 'explain [some_topic]' and read the resulting helptext"
##
CodeObjects
	Arena: "The in-code container housing all of the groups, tokens, styles, etc. used to build the map"
	Map: "The image generated to represent the arena, and the message it is attached to"
	Group: "A collection of identical tokens, and how they are actually referenced and drawn to the map (for efficiency and usability reasons)"
	Token: "A changeable (move/resize/hide/remove) feature of the arena; highly variable due to the system of combining styles"
##
UserInput
	CSV: "'Comma-Separated Variable' - how this bot accepts lists; [object]CSV represents any number of that object separated by only a comma, ie.\n> 1,2,3 could be an indexCSV\n> A1 could be a coordCSV (of length 1, so no separator is required)\n> B2, C3 is not a coordCSV (due to the space)"
	TokenTup: "A string that the arena uses to fetch a particular token or set of tokens (within the same group); specified by...\n> If group contains many tokens: [name of group]**:**[indexCSV]\n> If group contains single token [name of group]{**:**0}"
	Colour: "A colour in hex-code (#rgba); can be specified directly or through one of the following presets (case-insensitive; only first letter is required)...\n>Colours: red, green, blue, yellow, magenta, cyan, white\n>Teams: party (dark green), enemy (dark red), ally (dark blue), neutral (brown)\n>Types: dirt (pale brown), stone (pale grey), fire (orange), ice (pale blue), lightning (dark yellow), toxic (dark magenta)"
	Coord: "A point in 3D space (displays as 2D, but invisibly tracks height above the arena ground); can be specified numerically or using the in-built coordinate helper...\n> Numerically: [horizontal position, in cells]**-**[vertical position, in cells]{**-**height, in cells (defaults to 0)}\n> Coordinate: [letter (case sensitive)][number]{**-**height, in cells (defaults to 0)}"
	Range: "A series of rectangular areas, overlapping the previous area at the corner to create a snake; specified by:\n> [first_corner]**:**[second_corner]{**:**etc.}\nNote that there can be a rangeCSV (ie. B2:B3:C3,E5:G7), but that there will be no overlap across the comma; it just creates a new range for each"
	Span: "A range with two corners (enough to fully describe both position and dimensions of a token); specified by:\n> [first_corner]:{second_corner (defaults to first_corner + 1-1-1)}"
	Seed: "All of the mandatory fields for a new token - position, dimension, and whether_hidden; specified by:\n> [spanCSV] {whether_hidden (defaults to false)}"
##

main.js
	COMMANDS
		flags
			delete: "Delete the message containing this command, unless overridden by an error or later call to COMMANDS.flags.keep"
			keep: "Do not delete the message containing this command, unless overridden by a later call to COMMANDS.flags.delete"
			display: "Do not display the map of this channel's Arena, unless overridden by a later call to COMMANDS.flags.hidden"
			hidden: "Display the map of this channel's Arena, unless overridden by an error or later call to COMMANDS.flags.display"
			clean: "Trigger the autodeletion of this channel's Arena, unless overridden by an error or later call to COMMANDS.flags.extend"
			extend: "Reset the autodeletion timer of this channel's Arena, unless overridden by an error or later call to COMMANDS.flags.clean"
		tools
			explain: "Get helptext and/or a list of subcategories for a given subject.\nNothing to see here you don't already understand :)"
			arena: "Create a new arena of a given type.\nArgument options:\n> [arena_type (case-sensitive)] {additional arguments from CONSOLES.arena.[arena_type]}"
			thread:
				"A function that handles all the ways to edit and retrieve the thread being used for this channel's arena.\nOptions:"
				+ "\nClaim a thread (skipped if there is a current thread):\n> Call 'thread [thread_id]'\n> Call 'thread' in the thread you want to claim\n> Call 'thread' as a reply to the seed message of the thread you want to claim\n> Call 'thread' to claim the most recent thread titled 'DnDaisies_Thread'"
				+ "\nBump (and unarchive) the current thread:\n> Call 'thread' in the main channel while there is a current thread"
				+ "\nRevoke current thread:\n> Call 'thread' in the current thread"
				+ "\nCreate a new thread and claim it:\n> Call 'thread' (while there is no current thread) not in a thread and not as a reply to a message that seeds a thread"
			showguide: "Display the previous guide (does not persist across calls to 'arena') on the current map\nArgument options:\n> {additional arguments from CONSOLES.showguide.[arena_type]}"
			addguide: "Add a shape to the current guide, and display them all\nArgument options:\n> [shape (see CONSOLES.guide for options)] {additional arguments from CONSOLES.guide.[shape]}"
			setguide: "Remove all shapes to the current guide, then optionally call addguide.\nArgument options:\n> {arguments to pass to addguide} *=> no arguments just clears current guide*"
			instructions: "Create an instruction list that describes all groups and tokens in the current arena.\nNo arguments\nNotes:\n> Not all arena_types support this command."
			resizearena: "Create and immediately parse an instruction list where the current arena has been expanded and, optionally, all tokens moved by some offset\nArgument options:\n> [new_width] [new_height] {horizontal_offset} {vertical_offset}\nNotes:\n> Not all arena_types support this command."
##
core.js
	COMMANDS
		//group
			movegroup: "Move tokens (& can resize and/or edit whether hidden) in one group in ascending index order; skips removed tokens but not hidden ones.\nArgument options ('desired_positions' can instead be a rangeCSV to also resize tokens):\n> [group_name] [coordCSV = desired_positions] {t/f/! => hide/reveal/flip_whether_hidden}"
			hidegroup: "Hide and/or reveal all tokens in one group; skips removed tokens.\nArgument options:\n> [group_name] {t/f/! => hide/reveal/flip_whether_hidden (defaults to !)}"
			removegroup: "Delete a group and all tokens contained within.\nArgument options:\n> [group_name]"
			resizegroup: "Change the default dimensions of a group (does not affect tokens currently on the map).\nArgument options:\n> [group_name] [coord = width-height]\n> [group_name] [some_range_with_new_dimensions]"
		//token
			newtoken: "Add new tokens to a pre-existing group.\nArgument options ('desired_ranges' can instead be a coordCSV to set the tokens' dimensions to the group default):\n> [group_name] [rangeCSV = desired_ranges] {t/f => hidden/visible (defaults to f)}"
			move: "Move (& optionally resize and/or edit whether hidden) and number of tokens in one group.\nArgument options ('desired_positions' can instead a rangeCSV to also resize the tokens)\n> [group_name]:[indexCSV] [coordCSV = desired_positions], {t/f/! => hide/reveal/flip_whether_hidden}"
			hide: "Hide and/or reveal any number of tokens in one group.\nArgument options:\n> [group_name]:[indexCSV] {t/f/! => hide/reveal/flip_whether_hidden (defaults to !)}"
			remove: "Remove and/or return any number of tokens within the same group; removes the group if completely empties.\nArgument options:\n> [group_name]:[indexCSV] {t/f/! => remove/return/flip_whether_removed (defaults to t)}"
		//misc
			distance: "Measure the distance (in cells) between two points.\nArgument options (each 'coord' can accept one token):\n> [coord = start_point] [coord = end_point]"
			list: "Create a temporary instruction list that describes the current arena.\nArgument options:\n> {teamCSV = teams_to_list (defaults to all)}"
			ping: "Ping the bot.\nNo arguments"
	CONSOLES
		//redirected
			newGroup:
				"Handles the majority of the required fields of a TokenGroup (see CONSOLES.newGroup); most CONSOLES.newGroup.[arena_type] functions will call this, however they may have different arguments so see their page also."
				+ "\n> name => disregards capitalisation"
				+ "\n> colour => adds team/type shortcuts (see KEYWORDS.colour.shortcuts)"
				+ "\n> drawStage => rounds down to the nearest integer"
				+ "\n> styles => takes a CSV of [layer]:[category].[style] (or [category]:[style], which assumes [layer] = [category]) and sets the group to draw to [layer] with the [category].[style] function"
				+ "\n> seeds => builds seeds from a rangeCSV and one true/false for whether_hidden"
		guide
			rect: "Creates an unrotated rectangular outline.\nArgument options (each 'coord' can accept one token):\n> [coord = a_corner] [coord = opposite_corner]\n> [range = a_corner:opposite_corner]"
			line: "Creates a line connecting two points.\nArgument options (each 'coord' can accept one token):\n> [coord = start_point] [coord = end_point]\n> [range = start_point:end_point]"
			ellipse: "Creates an unrotated elliptical outline.\nArgument options ('coord = center' can accept one token):\n> [coord = center] [coord = horizontal_radius-vertical_radius]\n> [coord = center] [int = single_radius] *=> makes circle*"
	STYLES
		general
			null: "Has no effect; just for edge cases where a style is required for some kind of check."
		cell
			rect: "Cell style which creates unrotated rectangular shapes."
			ellipse: "Cell style which creates unrotated elliptical shapes."
		token
			fill: "Token style which fills the entire token area with one large cell"
			grid: "Token style which fills the entire token area with many 1-1 cells"
			image: "Token style which fills the entire token area with an image; defaults to token.fill if no image found"
		name
			center: "Name style which draws a high-contrast identifier in the exact center of the token"
			corner: "Name style which draws a high-contrast identifier in each corner of the token"
			partial: "Name style which draws the index (at most) in the center of the token; defaults to name.center if token is not an image"
		guide
			rect: "Guide style which outlines an unrotated rectangle"
			line: "Guide style which draws a line connecting any two points"
			ellipse: "Guide style which outlines an unrotated ellipse"
##
dnd.js
	COMMANDS
		//arena
			ambient: "Set the colour and opacity of the ambient shadows in the arena.\nArgument options:\n> [0-1 = opacity (higher is more opaque shadow)]\n> [0-255,0-255,0-255 = red,green,blue (higher is more colourful shadow)] {0-1 = opacity}\n> [0-255 = red] [0-255 = green] [0-255 = blue] {0-1 = opacity}\n> [0-255,0-255,0-255,0-1 = red,green,blue,opacity]"
		//group
			editlight: "Edit how all tokens in a group affect the shadows in the arena.\nArgument options:\n> [string = name] [number = radius] [0-1 = opacity] {0-1 = proportion of radius that is uniform}\n> [string = name] *=> if group has once affected light, toggle effect on or off*"

			army: "Tokens designed to quickly and easily represent a large group of identical creatures.\nDetails:\n> draw_stage = 3\n> styles = cell.ellipse,token.grid,name.corner"
			concentric: "Tokens designed to represent 5e's mobile area of effect spells.\nDetails:\n> draw_stage = 4\n> styles = cell.ellipse,token.concentric,name.center"
			creature: "Tokens designed to represent individual entities capable of independant movement.\nDetails:\n> draw_stage = -1 (always drawn last)\n> styles = cell.ellipse,token.image,name.center"
			grid: "Tokens designed to represent 5e's static area of effect spells.\nDetails:\n> draw_stage = 4\n> styles = cell.rect,token.grid,name.center"
			object: "Tokens designed to represent objects which can be interacted with but otherwise have little-to-no agency.\nDetails:\n> draw_stage = 2\n> styles = cell.rect,token.image"
			static: "Tokens designed to represent large areas of terrain.\nDetails:\n> draw_stage = 1\n> styles = cell.rect,token.grid"
			light: `Tokens designed to represent extinguishable light/shadow sources that are otherwise static.\nDetails:\n> draw_stage = 1\n> styles = light.gradient\nNotes:\n> These tokens can never be visible; use COMMANDS.${_extensionCode}.editlight on a visible group instead`
			custom: `Combine styles to design specific tokens for any purpose.\nNotes:\n> Directly calls CONSOLES.newGroup.[${_extensionCode}]\n> If a group has a token and/or name style, it must also have a cell style`
	CONSOLES
		//redirected
			arena: "An Arena specialised for 5e D&D.\nAdds...\n> STYLES.token.concentric\n> STYLES.guide: .cone, .sundail, .spider\nLayers:\n> token; draws the main body of the token\n> light; draws the ambient shadows, and any light/shadows emitted by tokens\n> name; draws identifiers to tokens that should be distinguishable\n> guide; draws free-place geometric guides for easier visualisation of movement, spells, etc."
			newGroup: undefined
		guide
			cone: "Creates a rotatable symmetrical triangle outline.\nArgument options (each 'coord' can accept one token):\n> [coord = origin] [number = height_of_triangle] {number = base_of_triangle (defaults to height_of_triangle)}"
			sundail: "Creates a circlular outline with a radial line to the edge.\nArgument options (each 'coord' can accept one token):\n> [coord = center] [coord = end_of_radial_line]\n> [coord = center] [number = radius]"
			spider: "Creates a collection of lines all emanating out from a single point.\nArgument options('coord = origin' can accept one token):\n> [coord = origin] [coordCSV = end_of_lines]\n> [coord = origin] [string = group_name]"
	STYLES
		light
			gradient: "Light style which creates a uniform circle at the center and then blends out into the surroundings using a gradient"
		guide
			cone: "Guide style which outlines a rotateable triangle (to mimic a 5e cone spell)"
			sundail: "Guide style which draws a line between two points and outlines the circle of points equidistant from the first"
			spider: "Guide style which draws a series of lines emanating from one point"
		token
			concentric: "Token style which fills two concentric cells centered on the token; the outer cell being half as opaque as the inner"
##
